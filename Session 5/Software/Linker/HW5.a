;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.3 Standard
;Automatic Program Generator
;© Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 4/14/2024
;Author  : kavousi.b99@gmail.com  - Bahareh Kavousi nejad - 99431217
;Company : IUST
;Comments:
;
;
;Chip type               : ATmega32
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*****************************************************/
;// Bahareh Kavousi nejad - 99431217
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;unsigned char CODE[]= {
;    0x00,    //    0002        . . . . . . . .
;    0x00,    //    0003        . . . . . . . .
;    0x00,    //    0004        . . . . . . . .
;    0x00,    //    0005        . . . . . . . .
;    0x00,    //    0006        . . . . . . . .
;    0x00,    //    0007        . . . . . . . .
;    0x00,    //    0008        . . . . . . . .
;    0x00,    //    0002        . . . . . . . .
;    0x00,    //    0003        . . . . . . . .
;    0x00,    //    0004        . . . . . . . .
;    0x00,    //    0005        . . . . . . . .
;    0x00,    //    0006        . . . . . . . .
;    0x00,    //    0007        . . . . . . . .
;    0x00,    //    0008        . . . . . . . .
;    0x7C,    //    0009        . # # # # # . .
;    0x12,    //    000A        . . . # . . # .
;    0x11,    //    000B        . . . # . . . #
;    0x12,    //    000C        . . . # . . # .
;    0x7C,    //    000D        . # # # # # . .
;    0x00,    //    000E        . . . . . . . .
;    0x00,    //    000F        . . . . . . . .
;    0x00,    //    0010        . . . . . . . .
;    0x00,    //    0011        . . . . . . . .
;    0x7F,    //    0012        . # # # # # # #
;    0x49,    //    0013        . # . . # . . #
;    0x49,    //    0014        . # . . # . . #
;    0x49,    //    0015        . # . . # . . #
;    0x36,    //    0016        . . # # . # # .
;    0x00,    //    0017        . . . . . . . .
;    0x00,    //    0018        . . . . . . . .
;    0x00,    //    0019        . . . . . . . .
;    0x3E,    //    001A        . . # # # # # .
;    0x41,    //    001B        . # . . . . . #
;    0x41,    //    001C        . # . . . . . #
;    0x41,    //    001D        . # . . . . . #
;    0x22,    //    001E        . . # . . . # .
;    0x00,    //    001F        . . . . . . . .
;    0x00,    //    0020        . . . . . . . .
;    0x00,    //    0021        . . . . . . . .
;    0x7F,    //    0022        . # # # # # # #
;    0x41,    //    0023        . # . . . . . #
;    0x41,    //    0024        . # . . . . . #
;    0x41,    //    0025        . # . . . . . #
;    0x3E,    //    0026        . . # # # # # .
;    0x00,    //    0027        . . . . . . . .
;    0x00,    //    0028        . . . . . . . .
;    0x00,    //    0029        . . . . . . . .
;    0x00,    //    002A        . . . . . . . .
;    0x00,    //    002B        . . . . . . . .
;    0x7F,    //    002C        . # # # # # # #
;    0x49,    //    002D        . # . . # . . #
;    0x49,    //    002E        . # . . # . . #
;    0x49,    //    002F        . # . . # . . #
;    0x49,    //    0030        . # . . # . . #
;    0x00,    //    0031        . . . . . . . .
;    0x00,    //    0032        . . . . . . . .
;    0x00,    //    0033        . . . . . . . .
;    0x00,    //    0034        . . . . . . . .
;    0x00,    //    0035        . . . . . . . .
;    0x7F,    //    0036        . # # # # # # #
;    0x09,    //    0037        . . . . # . . #
;    0x09,    //    0038        . . . . # . . #
;    0x09,    //    0039        . . . . # . . #
;    0x00,    //    003A        . . . . . . . .
;    0x00,    //    003B        . . . . . . . .
;    0x00,    //    003C        . . . . . . . .
;    0x00,    //    003D        . . . . . . . .
;    0x00,    //    003E        . . . . . . . .
;    0x00,    //    003F        . . . . . . . .
;    0x00,    //    0040        . . . . . . . .
;    0x00,    //    0041        . . . . . . . .
;    0x00,    //    0042        . . . . . . . .
;    0x00,    //    0043        . . . . . . . .
;    0x00,    //    0044        . . . . . . . .
;    0x00,    //    0045        . . . . . . . .
;    0x00,    //    0046        . . . . . . . .
;    0x00,    //    0047        . . . . . . . .
;    0x00     //    0048        . . . . . . .
;    };

	.DSEG
;
;unsigned char PORT[16] = {1, 2, 4, 8, 16, 32, 64, 128, 0, 0, 0, 0, 0, 0, 0, 0};
;unsigned int s, col, timer;
;
;void main(void) {
; 0000 006F void main(void) {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 0070     // Declare your local variables here
; 0000 0071 
; 0000 0072     // Input/Output Ports initialization
; 0000 0073     // Port A initialization
; 0000 0074     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0075     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0076     PORTA=0x00;
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 0077     DDRA=0x00;
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0078 
; 0000 0079     // Port B initialization
; 0000 007A     // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 007B     // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
; 0000 007C     PORTB=0x00;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 007D     DDRB=0xFF;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 007E 
; 0000 007F     // Port C initialization
; 0000 0080     // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 0081     // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
; 0000 0082     PORTC=0x00;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0083     DDRC=0xFF;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0084 
; 0000 0085     // Port D initialization
; 0000 0086     // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 0087     // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
; 0000 0088     PORTD=0x00;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0089     DDRD=0xFF;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 008A 
; 0000 008B     // Timer/Counter 0 initialization
; 0000 008C     // Clock source: System Clock
; 0000 008D     // Clock value: Timer 0 Stopped
; 0000 008E     // Mode: Normal top=FFh
; 0000 008F     // OC0 output: Disconnected
; 0000 0090     TCCR0=0x00;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0091     TCNT0=0x00;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0092     OCR0=0x00;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0093 
; 0000 0094     // Timer/Counter 1 initialization
; 0000 0095     // Clock source: System Clock
; 0000 0096     // Clock value: Timer1 Stopped
; 0000 0097     // Mode: Normal top=FFFFh
; 0000 0098     // OC1A output: Discon.
; 0000 0099     // OC1B output: Discon.
; 0000 009A     // Noise Canceler: Off
; 0000 009B     // Input Capture on Falling Edge
; 0000 009C     // Timer1 Overflow Interrupt: Off
; 0000 009D     // Input Capture Interrupt: Off
; 0000 009E     // Compare A Match Interrupt: Off
; 0000 009F     // Compare B Match Interrupt: Off
; 0000 00A0     TCCR1A=0x00;
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 00A1     TCCR1B=0x00;
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 00A2     TCNT1H=0x00;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 00A3     TCNT1L=0x00;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 00A4     ICR1H=0x00;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 00A5     ICR1L=0x00;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 00A6     OCR1AH=0x00;
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 00A7     OCR1AL=0x00;
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 00A8     OCR1BH=0x00;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 00A9     OCR1BL=0x00;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 00AA 
; 0000 00AB     // Timer/Counter 2 initialization
; 0000 00AC     // Clock source: System Clock
; 0000 00AD     // Clock value: Timer2 Stopped
; 0000 00AE     // Mode: Normal top=FFh
; 0000 00AF     // OC2 output: Disconnected
; 0000 00B0     ASSR=0x00;
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 00B1     TCCR2=0x00;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 00B2     TCNT2=0x00;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 00B3     OCR2=0x00;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 00B4 
; 0000 00B5     // External Interrupt(s) initialization
; 0000 00B6     // INT0: Off
; 0000 00B7     // INT1: Off
; 0000 00B8     // INT2: Off
; 0000 00B9     MCUCR=0x00;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 00BA     MCUCSR=0x00;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 00BB 
; 0000 00BC     // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00BD     TIMSK=0x00;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 00BE 
; 0000 00BF     // Analog Comparator initialization
; 0000 00C0     // Analog Comparator: Off
; 0000 00C1     // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 00C2     ACSR=0x80;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 00C3     SFIOR=0x00;
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 00C4 
; 0000 00C5 
; 0000 00C6    while(1) {
;PCODE: $0000004A VOL: 0
; 0000 00C7         for(s=72; s>=8; s--) {    // Iterate from right to left
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 00C8             for(timer=0; timer<4; timer++) {
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 00C9                 for (col=0;col<16;col++) {
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 00CA                     PORTB = PORT[col];
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 00CB                     PORTC = ~CODE[s+col];
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 00CC                     delay_ms(1);
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 00CD                 }
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 00CE 
; 0000 00CF                 delay_ms(2);
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 00D0 
; 0000 00D1                 for (col=0; col<16; col++) {
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 00D2                     PORTD = PORT[col];
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 00D3                     PORTC = ~CODE[s+col-8];
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 00D4                     delay_ms(1);
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 00D5                 }
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 00D6             }
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 00D7         }
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 00D8     };
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 00D9 }
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
